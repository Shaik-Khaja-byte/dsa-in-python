class Node:
    def __init__(self, data):
        self.data = data  # Data stored in the node
        self.prev = None  # Reference to the previous node
        self.next = None  # Reference to the next node

class DoublyLinkedList:
    def __init__(self):
        self.head = None  # Reference to the head (first node) of the list
    
    # Add a node to the front of the list
    def insert_at_front(self, data):
        new_node = Node(data)
        if self.head is None:  # If the list is empty
            self.head = new_node
        else:
            new_node.next = self.head
            self.head.prev = new_node
            self.head = new_node
    
    # Add a node to the end of the list
    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node
        new_node.prev = last
    
    # Delete a node with the given data
    def delete_node(self, key):
        if self.head is None:
            return
        current = self.head
        
        # If the node to be deleted is the head node
        if current.data == key:
            self.head = current.next
            if self.head is not None:
                self.head.prev = None
            return
        
        # Find the node to delete
        while current is not None and current.data != key:
            current = current.next
        
        if current is None:
            return  # Node not found
        
        if current.next is not None:
            current.next.prev = current.prev
        
        if current.prev is not None:
            current.prev.next = current.next

    # Traverse and print the list in forward direction
    def traverse_forward(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()
    
    # Traverse and print the list in reverse direction
    def traverse_reverse(self):
        current = self.head
        if current is None:
            return
        while current.next:
            current = current.next
        while current:
            print(current.data, end=" ")
            current = current.prev
        print()

# Example usage
dll = DoublyLinkedList()
dll.insert_at_end(10)
dll.insert_at_end(20)
dll.insert_at_end(30)
dll.insert_at_front(5)

print("Forward traversal:")
dll.traverse_forward()

print("Reverse traversal:")
dll.traverse_reverse()

dll.delete_node(20)

print("After deletion of 20:")
dll.traverse_forward()
